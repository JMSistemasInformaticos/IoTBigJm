/ Servo - Version: Latest 
#include <Servo.h> 
#include <DHT.h>
#include <DHT_U.h>
//Define Firebase Data object
/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/0c02ecc3-5c0e-4296-952e-263b7e22f981
  Arduino IoT Cloud Variables description
  The following variables are automatically generated and updated when changes are made to the Thing

  float hum;
  float temp;
  CloudSwitch luz_sala;
  CloudSwitch ventilador;
  int servo;
  bool luz_bano;
  bool luz_cuarto;
  bool luz_poste;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#define LED_PIN 23
#define LED2_PIN 15
#define LED3_PIN 13
#define MOTOR_PIN 22
#define MOTOR2_PIN 17
#define VENTILADOR_PIN 19
#define DHT_SENSOR_PIN 26
#define DHT_SENSOR_TYPE DHT11
DHT dht_sensor(DHT_SENSOR_PIN, DHT_SENSOR_TYPE);
Servo myservo;
void setup() {
  pinMode(LED_PIN, OUTPUT);
  pinMode(LED2_PIN, OUTPUT);
  pinMode(LED3_PIN, OUTPUT);
  pinMode(MOTOR_PIN, OUTPUT);
  pinMode(MOTOR2_PIN, OUTPUT);
  pinMode(DHT_SENSOR_PIN, INPUT);
  dht_sensor.begin();
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);
  myservo.attach(21);
  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  // conexión con firebase


 
}

void loop() {
  ArduinoCloud.update();
  // Your code here
  hum = dht_sensor.readHumidity();
  temp = dht_sensor.readTemperature();
  if (isnan(hum) || isnan(temp)) {
    Serial.println("Failed to read from DHT sensor!");
  } else {
    
    Serial.println("Humedad: "); Serial.println(hum); Serial.println("%");
    Serial.println("Temperatura: "); Serial.println(temp); Serial.println("°C");
    
  }
  delay(2000);
  
}
/*String getTime() {
    WiFiClient client;
    HTTPClient http;  
    String timeS = "";
    
    http.begin(client, "http://worldtimeapi.org/api/timezone/America/Guayaquil");
    int httpCode = http.GET();
    if (httpCode == HTTP_CODE_OK || httpCode == HTTP_CODE_MOVED_PERMANENTLY) {
          String payload = http.getString();
          
          int beginS = payload.indexOf("datetime");
          int endS = payload.indexOf("day_of_week");
          Serial.println(payload);
          timeS = payload.substring(beginS + 11, endS - 3);    
    }
    return timeS;
}*/
/*
  Since LuzBano is READ_WRITE variable, onLuzBanoChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLuzCuartoChange()  {
  // Add your code here to act upon LuzCuarto change
  if (luz_cuarto) {
    digitalWrite(LED_PIN, HIGH);
  } else {
    digitalWrite(LED_PIN, LOW);
  }
}
void onLuzBanoChange()  {
  // Add your code here to act upon LuzBano change
  if (luz_bano) {
    digitalWrite(LED2_PIN, HIGH);
  } else {
    digitalWrite(LED2_PIN, LOW);
  }
}

/*
  Since LuzPoste is READ_WRITE variable, onLuzPosteChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLuzPosteChange()  {
  // Add your code here to act upon LuzPoste change
  if (luz_poste) {
    digitalWrite(LED3_PIN, HIGH);
  } else {
    digitalWrite(LED3_PIN, LOW);
  }
}

/*
  Since LuzSala is READ_WRITE variable, onLuzSalaChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLuzSalaChange()  {
  // Add your code here to act upon LuzSala change
  if (luz_sala) {
    digitalWrite(MOTOR_PIN, LOW);
  } else {
    digitalWrite(MOTOR_PIN, HIGH);
  }
}

/*
  Since Ventilador is READ_WRITE variable, onVentiladorChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onVentiladorChange()  {
  // Add your code here to act upon Ventilador change
  if (ventilador) {
    digitalWrite(MOTOR2_PIN, LOW);
  } else {
    digitalWrite(MOTOR2_PIN, HIGH);
  }
}
void onServoChange()  {
  // Add your code here to act upon Servo change
  myservo.write(servo);
}
